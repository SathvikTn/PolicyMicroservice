Policy Administration System

Info -
All the Microservices, Client Application, DB Scripts, have to be packaged together in a single ZIP file. 
Associate must submit the solution file in ZIP format only 

A READ ME has to be provided with steps to execute the submitted solution, 
the Launch URLs of the Microservices in cloud must be specified. 
(Importantly, the READ ME should contain the steps to execute DB scripts, 
the LAUNCH URL of the application) 

Insureity is the Portal that allows any Agents to Login and create Policies for the consumers. 
This Portal in turn interacts with the Middleware system of the Organization which will allow 
the Agents to create policies based on quotes.

Scope -

REQ_02 		Policy Module 
		Policy Module is a Middleware Microservice that performs the following operations: 
		. Create Policy 
		. View Policy 
		. Issue Policy 

Functional Requirements -

Policy Microservice interacts with Consumer Microservice and Quotes Microservice, 
but it gets invoked from Insureity Portal (MVC app). Post authorization of request, 
Policy Microservice allows the following operations: 

. Creates Policy based on Business and Property Value from Consumer Service. 
  For these values, the service will validate the permissible Policies of type “Property Insurance” 
  and for the coverage the Agent has quoted, and get the quotes from Quotes service.

. Issue Policy will issue a policy to the consumer based on the payment and acceptance 
  status from consumer, for the quoted insurance cover. 

. View Policy allows to view the Policy Details 

Controller -> Service -> DB

Creating Models based on db tables
Scaffold-DbContext "Server=SATHZZ;Database=PolicyDB;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

Adding the connection string in app.settings.json
"ConnectionStrings": {
      "PolicyDBConnection": "Server=SATHZZ;Database=PolicyDB;Trusted_Connection=True;"
    },

In startup.cs, add using using Policy_Microservice.PAS_Models; and
under configureservices method, add below line
services.AddDbContext<PolicyDBContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("PolicyDBConnection")));


npm i ngx-pagination
npm i ng2-search-filter
npm i ngx-order-pipe